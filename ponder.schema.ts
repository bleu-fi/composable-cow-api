import { createSchema } from "@ponder/core";

export default createSchema((p) => ({
  Order: p.createTable({
    id: p.string(),
    chainId: p.int(),
    blockNumber: p.bigint(),
    blockTimestamp: p.bigint(),
    hash: p.hex().optional(),
    txHash: p.hex(),
    salt: p.hex(),
    staticInput: p.hex(),
    handler: p.hex(),
    owner: p.string(),
  }),
  Token: p.createTable({
    id: p.string(),
    address: p.hex(),
    chainId: p.int(),
    name: p.string(),
    symbol: p.string(),
    decimals: p.int(),
  }),
  User: p.createTable({
    id: p.string(),
    address: p.string(),
    chainId: p.int(),
  }),
  StopLossData: p.createTable({
    id: p.string(),
    orderId: p.string().references("Order.id"),
    order: p.one("orderId"),
    userId: p.string().references("User.id"),
    user: p.one("userId"),
    tokenInId: p.string().references("Token.id"),
    tokenIn: p.one("tokenInId"),
    tokenAmountIn: p.bigint(),
    tokenOutId: p.string().references("Token.id"),
    tokenOut: p.one("tokenOutId"),
    tokenAmountOut: p.bigint(),
    appData: p.hex(),
    to: p.hex(),
    isSellOrder: p.boolean(),
    isPartiallyFillable: p.boolean(),
    validityBucketSeconds: p.bigint(),
    sellTokenPriceOracle: p.hex(),
    buyTokenPriceOracle: p.hex(),
    strike: p.bigint(),
    maxTimeSinceLastOracleUpdate: p.bigint(),
  }),
  ConstantProductData: p.createTable({
    id: p.string(),
    orderId: p.string().references("Order.id"),
    order: p.one("orderId"),
    userId: p.string().references("User.id"),
    user: p.one("userId"),
    token0Id: p.string().references("Token.id"),
    token0: p.one("token0Id"),
    token1Id: p.string().references("Token.id"),
    token1: p.one("token1Id"),
    minTradedToken0: p.bigint(),
    priceOracle: p.hex(),
    priceOracleData: p.hex(),
    appData: p.hex(),
    disabled: p.boolean().optional(),
    version: p.string(),
  }),
}));
